    Git is free open source destributes version control system designed
to handle everything from small to large project with speed and efficiency.
And git tracking changes files in working area (file in repository or folder).
It designed for coordinating work among teams.
    
    How to uses Git.

    1.Install Git and create Github accout.
    2.Create repository(folder) 
        
        mkdir (folder name)
    
    3.In repository or folder we make initialize repository with git init.
        
        git init
    
    4.In repository we will create file in it. If we need track file we must to tracking  file and staging with command 
       git add  

    5.When we edit file that we add. We must commit and append message when we commit.

        git commit -m "your message about commit"

    6.Create New Branch
      Now that you've made a new commit let's try something a little more advanced.
      Say you want to making changes to the main project while developing the feature.
      This is where git branches come in. Branches allow you to move back and forth
      between 'states' of a project. For instance,if you want to add a new page to your website 
      you can create a new branch just for that page without affecting the main part
      of the project. Once you're done with the page,you can merge your changes from your branch
      from your branch in to primary branch. When you create a new branch,Git keep track of which commit your branch 'branched'
      off of,so it knows the history behind all the files. 		

    https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners
    เรียนรู้พื้นฐานการใช้งาน GIT AND GITHUB patihan phengpeo
	
	All git command and usage      
    ขั้นตอนการใช้งาน git
    
    1. set git config
    In the repository 
    e:\repository>git config --global user.name "user name"
    e:\repository>git config --global user.email name@gmail.com
    
    Again,you need to do this only once if you pass the --global option,because then Git will
    use that infomation for anything you do on that system. If you want to override this a different name or
    email addrees for specific projects,you can run the command without the --global option when you're in that project.

    2. Getting a Git repository
    You typically obtain a Git repository in one of two ways:
      1.You can take a local directory that is currently not under version control,and turn it in to a git
        repository,or
      2.You can clone an existing Git repository from elsewhere.

    3.initialize a Repository in an Existing directory.
    If you have a project directory that is currently not under version control and you want to start controlling it with Git,
    you first need togo to that project's directory. If you've never done this,it looks a little
    different depending on which system you're runnig:
    
    c:>cd c:/Users/user/my_project
    c:>git init

    This creates a new subbdirectory named .git that contains all of your necessary repository files
    a Git repository skeleton. At this point,nothing in your project is tracked yet. See Git Internals for more information about exactly what files are contained in the .git 
    directory you just created.

    If you want to start version-controlling existing files (as opposed to an empty directory),you should probably begin tracking those files and do an initial commit. You can accomplish that 
    with a few git add commands that specify the files you want to track,followed by a git commit:

    c:>git add *.c
    c:>git add LICENSE
    c:>git commit -m 'Initial project version'

    We'll go over what these commands do in just a minute. At this point.you have a Git repository with
    tracked files and an initial commit.
    https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository


    https://campus.datacamp.com/courses/introduction-to-git/basic-workflow?ex=7
    How can I tell what's going to be committed?

    git diff -r HEAD path file

    git diff -r HEAD learngit.txt

    Interlude: how can I edit a file?

Unix has a bewildering variety of text editors. In this course, 
we will sometimes use a very simple one called Nano. If you type nano filename, 
it will open filename for editing (or create it if it doesn't already exist). 
You can then move around with the arrow keys, delete characters with the backspace key, 
and so on. You can also do a few other operations with control-key combinations:

Ctrl-K: delete a line.
Ctrl-U: un-delete a line.
Ctrl-O: save the file ('O' stands for 'output').
Ctrl-X: exit the editor.

The command git log is used to view the log of the project's history. 
Log entries are shown most recent first, and look like this:

git  log;
commit 0430705487381195993bac9c21512ccfb511056d
Author: Rep Loop <repl@datacamp.com>
Date:   Wed Sep 20 13:42:26 2017 +0000

    Added year to report title.
The commit line displays a unique ID for the commit called a hash; 
we will explore these further in the next chapter. The other lines tell you who made the change, 
when, and what log message they wrote for the change.
When you run git log, Git automatically uses a pager to show one screen of 
output at a time. Press the space bar to go down a page or the 'q' key to quit.

How can I view a specific file's history?
A project's entire log can be overwhelming, so it's often useful to inspect 
only the changes to particular files or directories. You can do this using git log path, 
where path is the path to a specific file or directory. 
The log for a file shows changes made to that file; the log for a directory shows 
when files were added or deleted in that directory, 
rather than when the contents of the directory's files were changed.

You have been put in the dental repository. Use git log to display only the changes made to data/southern.csv. 
How many have there been?

git log data/southern.csv;

commit 29a59811032295e8bb3ddbbde5bb1e0ca59fb0c6
Author: Rep Loop <repl@datacamp.com>
Date:   Thu Jul 15 17:05:49 2021 +0000

    Adding fresh data for southern and western regions.

commit ac3bd16fbb319b0e9b6da119ce89a9fc2c99496d
Author: Rep Loop <repl@datacamp.com>
Date:   Thu Jul 15 17:05:49 2021 +0000

    Added seasonal CSV data files

    Where does Git store information?
    Git stores all of its extra information in a directory called .git located 
    in the root directory of the repository. Git expects this information 
    to be laid out in a very precise way, so you should never edit or delete anything in .git.
    
